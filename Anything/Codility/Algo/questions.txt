"""Triple Step : A child is running up a staircase with n steps and 
can hop either 1 step, 2 steps, or 3 steps at a time. 
Implement a method to count how many possible ways
the child can run up the stairs.
EXAMPLE
n=1 -> 1 way
n=2 -> 2 ways (1,1) (2)
n=3 -> 4 ways (1,1,1) (1,2) (2,1) (3)"""


=======================================================================


"""Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified and no extra space is inserted between words.

Note:

A word is defined as a character sequence consisting of non-space characters only.
Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
The input array words contains at least one word


Example 1:

Input: words = ["This", "is", "an", "example", "of", "text", "justification."], maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]

Example 2:

Input: words = ["What","must","be","acknowledgment","shall","be"], maxWidth = 16
Output:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
Explanation: Note that the last line is "shall be    " instead of "shall     be", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified becase it contains only one word.

Example 3:

Input: words = ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"], maxWidth = 20
Output:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]
"""






=======================================================================

"""One Away : There are three types of edits that can be performed on 
strings: insert a character, remove a character, or replace a character. 
Given two strings, write a function to check if 
they are one edit(or zero edits) away.

EXAMPLE
pales, pale -> true
pale, bale -> true
pale, ple -> true
pale, bake -> false

abc, cba
"""
"""
input_type = (a-z)

cases:
str1 str2

"""

def compare(string1, string2):
  return False

print(compare("pale", "bake"))

=====================================================================

"""Write a function called count_repetitions(s) that, given a non-empty string less than 200 characters in length,
returns the maximum number of equal parts without leaving any characters over.

## Examples ##
Input:
count_repetitions("abababab")
Output:
    4
Equal part: ab
Input:
count_repetitions("urxvturxvt")
Output:
    2
Equal part: urxvt
count_repetitions("xxxx")
output: 4

Equal part: x
count_repetitions("xyz")
output: 1
Equal part: xyz 
count_repetitions("xyyz") 
output: 1
Equal part: xyy
"""

def count_repetitions(s):
  strings_mapping = {}
  
  return 0  

print(count_repetitions("abababab"))
